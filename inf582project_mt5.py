# -*- coding: utf-8 -*-
"""inf582project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17qnNq4jEE5Okh1WXhtKWEnwfDz0j_98M
"""

import pandas as pd
train_df = pd.read_csv('data/train.csv')
test_df = pd.read_csv('data/test_text.csv')
validation_df = pd.read_csv('data/validation.csv')

import pandas as pd
import datasets
from datasets import Dataset, DatasetDict

tds = Dataset.from_pandas(train_df)
vds = Dataset.from_pandas(validation_df)

ds = DatasetDict()

ds['train'] = tds
ds['validation'] = vds

print(ds)

from transformers import AutoTokenizer

model_checkpoint = "google/mt5-small"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)

# max_input_length = 512 ## this number to avoid CUDA memory error
# max_target_length = 30


# def preprocess_function(train_df):
#     model_inputs = tokenizer(
#         train_df['text'],
#         max_length=max_input_length,
#         truncation=True,
#     )
#     labels = tokenizer(
#         train_df['titles'], max_length=max_target_length, truncation=True
#     )
#     model_inputs["titles"] = labels["input_ids"]
#     return model_inputs

prefix = "summarize: "


def preprocess_function(examples):
    inputs = [prefix + doc for doc in examples["text"]]
    model_inputs = tokenizer(inputs, max_length=512, truncation=True)

    labels = tokenizer(text_target=examples["titles"], max_length=128, truncation=True)

    model_inputs["labels"] = labels["input_ids"]
    return model_inputs

tokenized_ds = ds.map(preprocess_function, batched=True)

"""fine tune

"""

from transformers import AutoModelForSeq2SeqLM

model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)

!pip install transformers[torch]
!pip install accelerate -U
!pip install --upgrade accelerate
!pip install evaluate
!pip install rouge_score





from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model_checkpoint)



import evaluate

rouge = evaluate.load("rouge")

import numpy as np


def compute_metrics(eval_pred):
    predictions, labels = eval_pred
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    result = rouge.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)

    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in predictions]
    result["gen_len"] = np.mean(prediction_lens)

    return {k: round(v, 4) for k, v in result.items()}

"""train"""

from transformers import AutoModelForSeq2SeqLM, Seq2SeqTrainingArguments, Seq2SeqTrainer

model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)

from huggingface_hub import notebook_login

notebook_login()

training_args = Seq2SeqTrainingArguments(
    output_dir="sum_model",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=4,
    predict_with_generate=True,
    fp16= False,
    # bf16=True,
    push_to_hub=True,
)

trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_ds["train"],
    eval_dataset=tokenized_ds["validation"],
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)

trainer.train()

trainer.push_to_hub()

import torch
torch.cuda.empty_cache

